Y
str(Y[1:3])
str(Y[5:6])
str(Y[ ])
mtcars
#  brute force
median(mtcars$mpg)
median(mtcars$cyl)
median(mtcars$disp)
median(mtcars$hp)
median(mtcars$drat)
median(mtcars$wt)
median(mtcars$qsec)
median(mtcars$vs)
mean(mtcars$am)
output2 <- vector("double", ncol(mtcars))  # 1. output
for (i in seq_along(mtcars)) {            # 2. sequence
output2[[i]] <- median(mtcars[[i]])      # 3. body
}
output2
map_dbl(mtcars, median)
map_dbl(mtcars, sd)
mtcars
map_dbl(mtcars, sd) -> X
X
round(X, digits = 1)
round(map_dbl(mtcars, sd), digits = 1)
map_dbl(mtcars, max)
mtcars %>%
map_dbl(median)
mtcars %>%
map_dbl(min)
mtcars %>%
map(~. + 3)
mtcars
factor(mtcars$cyl)
models <- mtcars %>%
split(.$cyl) %>%
map(~lm(mpg ~ wt, data = .))
models
models %>%
map(summary)
models %>%
map(summary) %>%
map_dbl(~.$r.squared)
models %>%
map(summary) %>%
map_dbl(~.$r.squared) -> models1
models1
models1 -> xx
xx
xx^.5
# method 2
sqrt(models1)
# and the missing values
U[U > 2]
View(Y)
library(tidyverse)
library(dplyr)
library(purrr)
V <- c("Bears", "Lions", "Dolphins", "Eagles", "Bengals")
V[[3]]
V[[1,3,5]]
V[c(1,3,5)]
V[-1]
V[-1]
V[c(2:5)]
K <- list( x = 3:7, "never", 43, y = list(10,20,30))
typeof(AA)
typeof(M)
str(K)
length(K)
K[[4]]
str(K[[4]])
K{}
K[]
str(K[])
tribble( ~x,    ~y,    ~w,    ~z,
210,   300,   220,   180,
102,   100,   119,   187,
176,   175,   188,   173,
87,    95,   91,     94,
202,   210,  234,    218,
110,   122,  131,    128,
) -> dt
dt
map_dbl(dt, mean)
map_dbl(dt, mean)
map_dbl(dt, sd)
summary(dt)
dt %>%
map(~. ** 0.5)
dt %>%
map(~. ^ 0.5)
x <- list(26, 32, 45, 50, 65, 77, 82)
y <- list(30, 43, 50, 58, 62, 71, 88)
map_dbl[x, +y]
x+y
library(tidyverse)
library(dplyr)
library(purrr)
Vector1 <- (c( 10, 19, 121, 83, 63, 7, 77, 61, 51, 97, 123, 41))
Vector1[c(1,12)]
Vector1[c(1,12)]
Vector1[c(10,41)]
Vector1[Vector1<60]
Vector1[c(1,12)]
Vector1[Vector1==10 & Vector1==41]
Vector1[c(1,12)]
q1=Vector1[Vector1==10 & Vector1==41]
q1
Vector1[c(1,12)]
q1=Vector1[Vector1==10 | Vector1==41]
q1
Vector1[Vector1<60]
Vector1[c(1,2,6,9,12)]
Vector1[Vector1 %%2 == 0 |Vector1 %%3==0]
Vector1[!Vector1 %%2 == 0 |!Vector1 %%3==0]
Vector1[c()]
Vector1[Vector1 %%c(2,3) !== 0]
Vector1[Vector1 %%c(2,3) != 0]
Vector1[Vector1 %% 2 != 0| Vector1 %% 3 != 0]
Vector1[Vector1 %% 2 != 0& Vector1 %% 3 != 0]
Vector1[Vector1 %% 2 != 0 & Vector1 %% 3 != 0]
Vector1[c(2,3,4,6,7,8,10,12)]
myList <-  list(TRUE, 12.35, 'pear', 48, c = 3:8, list(23, 'team'))
myList
myList <-  list(TRUE, 12.35, 'pear', 48, c = 3:8, list(23, 'team'))
myList
str(myList[!is.na(MyList)])
myList <-  list(TRUE, 12.35, 'pear', 48, c = 3:8, list(23, 'team'))
myList
str(myList[!is.na(myList)])
str(myList[])
Y <- list("ball", 25, 12.25, NA, b = 1:5, c = list(-1, "west"))
str(Y[ ])
Y <- list("ball", NA, 12.25, NA, b = 1:5, c = list(-1, "west"))
str(Y[ ])
str(myList[3])
str(myList[1:3])
str(myList[1:3])
myList$3
myList$"pear"
myList <-  list(TRUE, 12.35, p='pear', 48, c = 3:8, list(23, 'team'))
myList
myList$p
quadratic <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
else if(delta(a,b,c) == 0){ # second case D=0
x = -b/(2*a)
}
else {"There are no real roots."} # third case D<0
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
} #from: https://rpubs.com/kikihatzistavrou/80124
quadratic <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
else if(delta(a,b,c) == 0){ # second case D=0
x = -b/(2*a)
}
else {"There are no real roots."} # third case D<0
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
} #from: https://rpubs.com/kikihatzistavrou/80124
quadratic(1,-3,-28)
quadratic(1,1,-30)
quadratic(3,14,8)
quadratic(2,11,-6)
quadratic <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
else if(delta(a,b,c) == 0){ # second case D=0
x = -b/(2*a)
}
else {"There are no real roots."} # third case D<0
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
} #from: https://rpubs.com/kikihatzistavrou/80124
quadratic(1,-3,-28)
quadratic(1,1,-30)
quadratic(3,14,8)
quadratic(2,11,-6)
quadratic <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
else if(delta(a,b,c) == 0){ # second case D=0
x = -b/(2*a)
}
else {"There are no real roots."} # third case D<0
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
} #from: https://rpubs.com/kikihatzistavrou/80124
a=quadratic(1,-3,-28)
a
b=quadratic(1,1,-30)
b
c=quadratic(3,14,8)
c
d=quadratic(2,11,-6)
d
tibble::tibble(x = 1:10, y = 10:1, z= seq(5,1,0.5))
tibble::tibble(x = 1:10, y = 10:1))
tibble::tibble(x = 1:10, y = 10:1)
t=tibble::tibble(x = 1:10, y = 10:1, z=rev(seq(1,5,0.5)))
seq(5,1,0.5)
seq(1,5,by=0.5)
#t=tibble::tibble(x = 1:10, y = 10:1, z=
seq(5,1,by=0.5)
rev(seq(1,5,by=0.5))
#t=tibble::tibble(x = 1:10, y = 10:1, z=
rev(seq(0.5,5,by=0.5))
#t=tibble::tibble(x = 1:10, y = 10:1, z=
z= rev(seq(0.5,5,by=0.5))
t=tibble::tibble(x = 1:10, y = 10:1, z=z)
z= rev(seq(0.5,5,by=0.5))
t=tibble::tibble(x = 1:10, y = 10:1, z=z)
t
map_dbl(mtcars, IQR)
map_dbl(mtcars, IQR)
map_dbl(t, IQR)
quadratic <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
} #from: https://rpubs.com/kikihatzistavrou/80124
a=quadratic(1,-3,-28)
a
b=quadratic(1,1,-30)
b
c=quadratic(3,14,8)
c
d=quadratic(2,11,-6)
d
myList <-  list(TRUE, 12.35, p='pear', 48, c = 3:8, list(23, 'team')) #creating a new variable p for pear so the $ can extract it
myList$p
quadratic <- function(a,b,c){{
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
} #from: https://rpubs.com/kikihatzistavrou/80124
a=quadratic(1,-3,-28)
a
b=quadratic(1,1,-30)
b
c=quadratic(3,14,8)
c
d=quadratic(2,11,-6)
d
quadratic <- function(a,b,c){{
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
} #from: https://rpubs.com/kikihatzistavrou/80124,also we already are told each equation has two real solutions, so there is no real need to check for whether the discriminant is less than or equal to zero.
a=quadratic(1,-3,-28)
a
b=quadratic(1,1,-30)
b
c=quadratic(3,14,8)
c
d=quadratic(2,11,-6)
d
quadratic <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
} #from: https://rpubs.com/kikihatzistavrou/80124
a=quadratic(1,-3,-28)
a
b=quadratic(1,1,-30)
b
c=quadratic(3,14,8)
c
d=quadratic(2,11,-6)
d
quadratic <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
else if(delta(a,b,c) == 0){ # second case D=0
x = -b/(2*a)
}
else {"There are no real roots."} # third case D<0
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
} #from: https://rpubs.com/kikihatzistavrou/80124
a=quadratic(1,-3,-28)
a
b=quadratic(1,1,-30)
b
c=quadratic(3,14,8)
c
d=quadratic(2,11,-6)
d
quadratic <- function(a,b,c){
{ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
} #from: https://rpubs.com/kikihatzistavrou/80124
a=quadratic(1,-3,-28)
a
b=quadratic(1,1,-30)
b
c=quadratic(3,14,8)
c
d=quadratic(2,11,-6)
d
quadratic <- function(a,b,c){
{ x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
} #from: https://rpubs.com/kikihatzistavrou/80124
a=quadratic(1,-3,-28)
a
b=quadratic(1,1,-30)
b
c=quadratic(3,14,8)
c
d=quadratic(2,11,-6)
d
tribble( ~mean, ~sd,  ~n,
5,       1,   15,
10,      5,   10,
-3,      10,  20
) -> parameters
parameters
pmap(parameters, rnorm)
library(purrr)
library(tidyverse)
tribble( ~mean, ~sd,  ~n,
5,       1,   15,
10,      5,   10,
-3,      10,  20
) -> parameters
parameters
pmap(parameters, rnorm)
tribble( ~mean, ~sd,  ~n,
5,       1,   15,
10,      5,   10,
-3,      10,  20
) -> parameters
parameters
pmap(parameters, rnorm)
tribble( ~mean, ~sd,  ~n,
5,       1,   15,
10,      5,   10,
-3,      10,  20
) -> parameters
parameters
as_tibble(pmap(parameters, rnorm))
tibble(
a = 2*(1:10),
b = a/4,
c = 5,
d = c - b,
e = "k"
)
rnorm(400,2,.5)->x
x
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
t1<-tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
t1<-tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
t1
t1<-tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
t1
t1
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
#assigning this to a variable will save the numbers also,losing the randomness.
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
#assigning this to a variable will save the numbers also,losing the randomness.
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
#assigning this to a variable will save the numbers also,losing the randomness.
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
tibble(
mean10n = rnorm(10, -10),
mean0 = rnorm(10,0),
mean10p = rnorm(10,10),
mean100 = rnorm(10,100)
)
#running again to show randomness
#assigning this to a variable will save the numbers also,losing the randomness.
sqrt(9)
pmap_dbl(list(X,Mean,sd), function(first, second, third) (first-second)/(third/sqrt(9)))
library(tidyverse)
library(dplyr)
library(purrr)
pmap_dbl(list(X,Mean,sd), function(first, second, third) (first-second)/(third/sqrt(9)))
X <- list(12, 14, 15, 18, 19, 22,10,18,18)
Mean <- list(16, 16, 16, 16, 16,16,16,16,16)
sd <- list(2, 2, 2, 2, 2,2,2,2,2)
pmap_dbl(list(X,Mean,sd), function(first, second, third) (first-second)/third)
pmap_dbl(list(X,Mean,sd), function(first, second, third) (first-second)/(third/sqrt(9)))
